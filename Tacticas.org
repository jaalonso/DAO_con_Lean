+ =(apply h)=, cuando =h= es una implicación, aplica la regla
  de eliminación de la implicación; es decir, si =h= es =(P → Q)= y la
  conclusión coincide con =Q=, entonces sustituye la conclusión por =P=.
+ =assumption= concluye la demostración si la conclusión coincide con alguna de
  las hipótesis.
+ =exact h= concluye la demostración si =h= es del tipo de la conclusión.
+ =(cases h with h1 h2)=, cuando la hipótesis =h= es una equivalencia aplica la
  regla de eliminación de la equivalencia; es decir, si =h= es =(P ↔ Q)=,
  entonces elimina =h= y añade las hipótesis =(h1 : P → Q)= y =(h2 : Q → P)=.
+ =(cases h with h1 h2)=, cuando la hipótesis =h= es una conjunción aplica la
  regla de eliminación de la conjunción; es decir, si =h= es =(P ∧ Q)=,
  entonces elimina =h= y añade las hipótesis =(h1 : P)= y =(h2 : Q)=.
+ =(cases h with h1 h2)=, cuando la hipótesis =h= es una disyunción aplica la
  regla de eliminación de la disyunción; es decir, si =h= es =(P ∨ Q)=,
  entonces elimina =h= y crea dos casos: uno añadiendo la hipótesis =(h1 : P)= 
  y otro añadiendo la hipótesis =(h2 : Q)=.
+ =intro h=, cuando la conclusión es una implicación, aplica la regla de
  introducción de la implicación; es decir, si la conclusión es =(P → Q)=
  entonces añade la hipótesis =(h : P)= y cambia la conclusión a =Q=.
+ =finish= demuestra la conclusión de forma automática.
+ =linarith= demuestra la conclusión mediante aritmética lineal.
+ =nlinarith= es una extensión de =linarith= con un preprocesamiento que permite
  resolver problemas aritméticos no lineales.
+ =ring= demuestra la conclusión normalizando las expresiones con las regñlas de
  los anillos.
+ =rintro ⟨h1, h2⟩=, cuando la conclusión es una implicación cuyo antecedente es
  una conjunción, aplica las regla de introducción de la implicación y de
  eliminación de la conjunción; es decir, si la conclusión es =(P ∧ Q → R)=
  entonces añade las hipótesis =(h1 : P)= y =(h2 : Q)= y cambia la conclusión a
  =R=.
+ =rintro (h1 | h2)=, cuando la conclusión es una implicación cuyo antecedente
  es una disyunción, aplica las regla des introducción de la implicación y de
  eliminación de la disyunción; es decir, si la conclusión es =(P ∨ Q → R)=
  entonces crea dos casos: en el primero añade la hipótesis =(h1 : P)= y cambia
  a conclusión a R; en el segundo añade la hipótesis =(h2 : Q)= y cambia la
  conclusión a =R=.
+ =rw h= cuando =h= es una igualdad sustituye en la conclusión el término
  izquierdo de =h= por el derecho.
+ =rw h=, cuando =h= es una equivalencia como =(P ↔ Q)=, sustituye en la
  conclusión =P= por =Q=.
+ =rw ← h= cuando =h= es una igualdad sustituye en la conclusión el término
  derecho de =h= por el izquierdo
+ =rw h at h'= cuando =h= es una igualdad sustituye en la hipótesis =h'= el
  término izquierdo de =h= por el derecho.
+ =rw h at h'= cuando =h= es una equivalencia como =(P ↔ Q)= sustituye en la
  hipótesis =h'= la fórmula =P= por =Q=.
+ =rw ← h at h'= cuando =h= es una igualdad sustituye en la hipótesis =h'= el
  término derecho de =h= por el izquierdo
+ =rw ← h at h'= cuando =h= es una equivalencia como =(P ↔ Q)= sustituye en la
  hipótesis =h'= la fórmula =Q= por =P=.
+ =rwa h= cuando =h= es una igualdad sustituye en la conclusión el término
  izquierdo de =h= por el derecho y, a continuación, aplica =assumption=.
+ =rwa h at h'= cuando =h= es una igualdad sustituye en la hipótesis =h'= el
  término izquierdo de =h= por el derecho y, a continuación, aplica
  =assumption=..
+ =rwa ← h at h'= cuando =h= es una igualdad sustituye en la hipótesis =h'= el
  término derecho de =h= por el izquierdo y, a continuación, aplica
  =assumption=.
+ =simp= aplica reglas de simplificación a la conclusión.
+ =simp [h]= aplica reglas de simplificación, ampliadas con =h=, a la
  conclusión.
+ =solve_by_elim= intenta demostrar el objetivo aplicándole reglas de
  eliminación. 
+ =split=, cuando la conclusión es una conjunción, aplica la regla de
  eliminación de la conjunción; es decir, si la conclusión es =(P ∧ Q)=,
  entonces crea dos subojetivos: el primero en el que la conclusión es =P= y el
  segundo donde es =Q=. 
+ =tauto= demuestra automáticamente las tautologías.

** Demostraciones estructuradas
+ =(assume h : P)=, cuando la conclusión es de la forma =(P → Q)=, añade la
  hipótesis =P= y cambia la conclusión a =Q=.
+ =(have h : e)= genera dos subojetivos: el primero tiene como conclusión =e= y
  el segundo tiene la conclusión actual pero se le añade la hipótesis =(h : e)=.
+ =show P, from h= demuestra la conclusión con la prueba =h=.

** Composiciones y descomposiciones
+ Si =h1= es una demostración de =(P → Q)= y =h2= es una demostración de =P=,
  entonces =(h1 h2)= es una demostración de =Q=.
+ Si =h= es la conjunción =(P ∧ Q)=, entonces =h.letf= es =P= y =h.right= es =Q=. 
+ Si =h= es la conjunción =(P ∧ Q)=, entonces =h.1= es =P= y =h.2= es =Q=. 
+ Si =h= es la equivalencia =(P ↔ Q)=, entonces =h.mp= es =(P → Q)= y =h.mpr= es
  =(Q → P)=.
+ Si =h= es la equivalencia =(P ↔ Q)=, entonces =h.1= es =(P → Q)= y =h.2= es 
  =(Q → P)=. 
+ Si =h= es una igualdad entonces =h ▸ h'= es la expresión obtenida sustituyendo
  en h' el término izquierdo de =h= por el derecho. 

