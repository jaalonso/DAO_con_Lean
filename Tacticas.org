+ =(apply h)=, cuando =h= es una implicación, aplica la regla
  de eliminación de la implicación; es decir, si =h= es =(P → Q)= y la
  conclusión coincide con =Q=, entonces sustituye la conclusión por =P=.
+ =apply h=, con las hipótesis =h : ∀ (x : U), P x → Q x= y =a : U= y la
  conclusión =Q a=, cambia la conclusión a =P a=.
+ =assumption= concluye la demostración si la conclusión coincide con alguna de
  las hipótesis.
+ =(by_cases hP: P)= divide el objetivo en dos añadiendo la hipótesis =hP : P=
  al primero y =hP : ¬P= al segundo.
+ =by_contradiction h=, si la conclusión es =P=, entonces añade la hipótesis
  =h : ¬P= y cambia la conclusión a =false=.
+ =(cases h with h1 h2)=, cuando la hipótesis =h= es una equivalencia aplica la
  regla de eliminación de la equivalencia; es decir, si =h= es =(P ↔ Q)=,
  entonces elimina =h= y añade las hipótesis =(h1 : P → Q)= y =(h2 : Q → P)=.
+ =(cases h with h1 h2)=, cuando la hipótesis =h= es una conjunción aplica la
  regla de eliminación de la conjunción; es decir, si =h= es =(P ∧ Q)=,
  entonces elimina =h= y añade las hipótesis =(h1 : P)= y =(h2 : Q)=.
+ =(cases h with h1 h2)=, cuando la hipótesis =h= es una disyunción aplica la
  regla de eliminación de la disyunción; es decir, si =h= es =(P ∨ Q)=,
  entonces elimina =h= y crea dos casos: uno añadiendo la hipótesis =(h1 : P)=
  y otro añadiendo la hipótesis =(h2 : Q)=.
+ =(cases h with a ha)=, cuando la hipótesis =h= es un existencial aplica la
  regla de eliminación del existencia; es decir, si =h= es =(∃ x : U, P x)=,
  entonces elimina =h= y añade las hipótesis =(a : U)= y =(ha : P a)=.
+ =(cases h e (by t) with a ha)=, cuando la hipótesis =h= es de la forma
  =∀ x, P x → ∃ y : U, Q x y= y la táctica =t= prueba =P e= entonces añade las
  hipótesis =a : U= y =ha : Q e a=. (Ver [[./src/5_Limites/CN_de_limite.lean][ejemplo]]).
+ =contrapose= transforma la conclusión en su contrapositiva. (Ver [[./src/4_Contradiccion_y_negacion/Un_numero_es_par_syss_lo_es_su_cuadrado.lean][ejemplo]]).
+ =exact h= concluye la demostración si =h= es del tipo de la conclusión.
+ =funext=, cuando la conclusión es una igualdad de funciones ~f = g~ de dominio
  =U= introduce la hipótesis =x : U= y cambia la conclusión a ~f x = g x~; es
  decir, aplica el principio de extensionalidad de funciones.
+ =cong=, si la conclusión es una igualdad ~A = B~ intenta identificar ambos
  lados y deja como nuevos objetivos los subtérminos de A y B que no son
  iguales. Por ejemplo, supongamos que el objetivo es ~x * f y = g w * f z~.
  Entonces =congr= produce dos objetivos: ~x = g w~ e ~y = z~.
+ =intro h=, cuando la conclusión es una implicación, aplica la regla de
  introducción de la implicación; es decir, si la conclusión es =(P → Q)=
  entonces añade la hipótesis =(h : P)= y cambia la conclusión a =Q=.
+ =intros h1 ... hn= introduce las hipótesis h1, ..., hn correspondiente a la
  introducciones de condicionales y universales de la conclusión.
+ =intro a=, cuando la conclusión es =∀ x : U, P x=, aplica la regla de
  introducción del cuantificador universal; es decir, añade la hipótesis =a : U=
  y cambia la conclusión a =P a=
+ =finish= demuestra la conclusión de forma automática.
+ =linarith= demuestra la conclusión mediante aritmética lineal.
+ =nlinarith= es una extensión de =linarith= con un preprocesamiento que permite
  resolver problemas aritméticos no lineales.
+ =norm_num= normaliza expresiones aritméticas.
+ =push_neg= interioriza las negaciones en la conclusión.
+ =rcases h with ⟨a, rfl⟩=, cuando =h= es una fórmula existencial cuyo cuerpo es
  una ecuación, sustituye la variable del existencial por =a= y reescribe con la
  ecuación obtenida.
+ =refl= reduce ambos términos de una ecuación y comprueba que son iguales.
+ =rename_var x y at h=, cuando se tiene la hipótesis =h : ∀ x, P x= la
  cambia a =h : ∀ y, P y=.
+ =ring= demuestra la conclusión normalizando las expresiones con las regñlas de
  los anillos.
+ =rintro ⟨h1, h2⟩=, cuando la conclusión es una implicación cuyo antecedente es
  una conjunción, aplica las regla de introducción de la implicación y de
  eliminación de la conjunción; es decir, si la conclusión es =(P ∧ Q → R)=
  entonces añade las hipótesis =(h1 : P)= y =(h2 : Q)= y cambia la conclusión a
  =R=.
+ =rintro (h1 | h2)=, cuando la conclusión es una implicación cuyo antecedente
  es una disyunción, aplica las regla des introducción de la implicación y de
  eliminación de la disyunción; es decir, si la conclusión es =(P ∨ Q → R)=
  entonces crea dos casos: en el primero añade la hipótesis =(h1 : P)= y cambia
  a conclusión a R; en el segundo añade la hipótesis =(h2 : Q)= y cambia la
  conclusión a =R=.
+ =rintro ⟨a, rfl⟩=, cuando la conclusión es una fórmula existencial cuyo cuerpo es
  una ecuación, sustituye la variable del existencial por =a= y reescribe con la
  ecuación obtenida.
+ =rw h= cuando =h= es una igualdad sustituye en la conclusión el término
  izquierdo de =h= por el derecho.
+ =rw h=, cuando =h= es una equivalencia como =(P ↔ Q)=, sustituye en la
  conclusión =P= por =Q=.
+ =rw [h1, ... hn]= reescribe usando sucesivamente las ecuaciones =h1=, ...,
  =hn=.
+ =rw ← h= cuando =h= es una igualdad sustituye en la conclusión el término
  derecho de =h= por el izquierdo
+ =rw h at h'= cuando =h= es una igualdad sustituye en la hipótesis =h'= el
  término izquierdo de =h= por el derecho.
+ =rw h at h'= cuando =h= es una equivalencia como =(P ↔ Q)= sustituye en la
  hipótesis =h'= la fórmula =P= por =Q=.
+ =rw ← h at h'= cuando =h= es una igualdad sustituye en la hipótesis =h'= el
  término derecho de =h= por el izquierdo
+ =rw ← h at h'= cuando =h= es una equivalencia como =(P ↔ Q)= sustituye en la
  hipótesis =h'= la fórmula =Q= por =P=.
+ =rwa h= cuando =h= es una igualdad sustituye en la conclusión el término
  izquierdo de =h= por el derecho y, a continuación, aplica =assumption=.
+ =rwa h at h'= cuando =h= es una igualdad sustituye en la hipótesis =h'= el
  término izquierdo de =h= por el derecho y, a continuación, aplica
  =assumption=..
+ =rwa ← h at h'= cuando =h= es una igualdad sustituye en la hipótesis =h'= el
  término derecho de =h= por el izquierdo y, a continuación, aplica
  =assumption=.
+ =simp= aplica reglas de simplificación a la conclusión.
+ =simp [h]= aplica reglas de simplificación, ampliadas con =h=, a la
  conclusión.
+ =solve_by_elim= intenta demostrar el objetivo aplicándole reglas de
  eliminación.
+ Si =specialize h a=, cuando =h : ∀ x : U, P x= y =a : U=, cambia =h= en
  =h : P a=.
+ =split=, cuando la conclusión es una conjunción, aplica la regla de
  eliminación de la conjunción; es decir, si la conclusión es =(P ∧ Q)=,
  entonces crea dos subojetivos: el primero en el que la conclusión es =P= y el
  segundo donde es =Q=.
+ =split=, cuando la conclusión es un bicondicional, aplica la regla de
  eliminación del bicondicional; es decir, si la conclusión es =(P ↔ Q)=,
  entonces crea dos subojetivos: el primero en el que la conclusión es =P → Q= y el
  segundo donde es =Q → P=.
+ =tauto= demuestra automáticamente las tautologías.
+ =tidy= demuestra la conclusión usando una variedad de tácticas conservativas.
+ =unfold f= expande la definición de la función =f= en la conclusión.
+ =unfold f at h= expande la definición de la función =f= en la hipótesis =h=.
+ =use a=, cuando la conclusión =∃ x : U, P x= y se tiene la hipótesis =x : U=,
  aplica la regla de introducción el cuantificador existencial; es decir, cambia
  la conclusión a =P a=.

** Demostraciones estructuradas
+ =(assume h : P)=, cuando la conclusión es de la forma =(P → Q)=, añade la
  hipótesis =P= y cambia la conclusión a =Q=.
+ =(have h : e)= genera dos subojetivos: el primero tiene como conclusión =e= y
  el segundo tiene la conclusión actual pero se le añade la hipótesis =(h : e)=.
+ =show P, from h= demuestra la conclusión con la prueba =h=.

** Composiciones y descomposiciones
+ Si =h1= es una demostración de =(P → Q)= y =h2= es una demostración de =P=,
  entonces =(h1 h2)= es una demostración de =Q=.
+ Si =h= es la conjunción =(P ∧ Q)=, entonces =h.letf= es =P= y =h.right= es =Q=.
+ Si =h= es la conjunción =(P ∧ Q)=, entonces =h.1= es =P= y =h.2= es =Q=.
+ Si =h= es la equivalencia =(P ↔ Q)=, entonces =h.mp= es =(P → Q)= y =h.mpr= es
  =(Q → P)=.
+ Si =h= es la equivalencia =(P ↔ Q)=, entonces =h.1= es =(P → Q)= y =h.2= es
  =(Q → P)=.
+ Si =h : ∀ x : U, P x= y =a : U=, entonces =h a= es =P a=.
+ Si =h= es una igualdad entonces =h ▸ h'= es la expresión obtenida sustituyendo
  en h' el término izquierdo de =h= por el derecho.
+ =intro h, cases h with a ha= se reduce a =rintro \<a, ha\>=
+ =intros h1 h2, cases h2 with a ha= se reduce a =rintro h \<a, ha\>=.
