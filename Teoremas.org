# Resumen de teoremas

Los teoremas utilizados son los siguientes:

#+begin_src lean
+ abs_add : abs (a + b) ≤ abs a + abs b
+ abs_eq_zero : abs a = 0 ↔ a = 0
+ abs_le : abs a ≤ b ↔ - b ≤ a ∧ a ≤ b
+ abs_nonneg : 0 ≤ abs a
+ add_assoc : (a + b) + c = a + (b + c)
+ add_comm : a + b = b + a
+ add_eq_zero_iff_eq_neg : a + b = 0 ↔ a = -b
+ add_halves : a / 2 + a / 2 = a
+ add_le_add : a ≤ b → c ≤ d → a + c ≤ b + d
+ add_le_add_left : a ≤ b → ∀ (c : ℝ), c + a ≤ c + b
+ add_le_add_right : a ≤ b → ∀ (c : ℝ), a + c ≤ b + c
+ add_mul : (a + b) * c = a * c + b * c
+ add_nonneg : 0 ≤ a → 0 ≤ b → 0 ≤ a + b
+ add_sub : a + (b - c) = (a + b) - c
+ add_sub_add_left_eq_sub : c + a - (c + b) = a - b
+ add_sub_add_right_eq_sub : a + c - (b + c) = a - b
+ add_zero : a + 0 = a
+ and.comm : P ∧ Q ↔ Q ∧ P
+ and.intro : P → Q → P ∧ Q
+ and.left : P ∧ Q → P
+ and_imp : (P ∧ Q → R) ↔ (P → (Q → R))
+ antisymm : a ≺ b → b ≺ a → a = b
+ classical.em : p ∨ ¬p
+ congr_arg : a₁ = a₂ → f a₁ = f a₂
+ dvd_add : a ∣ b → a ∣ c → a ∣ b + c
+ dvd_antisymm : a ∣ b → b ∣ a → a = b
+ dvd_gcd_iff : c ∣ gcd a b ↔ c ∣ a ∧ c ∣ b
+ dvd_refl: a ∣ a
+ dvd_trans : a ∣ b → b ∣ c → a ∣ c
+ eq.trans : a = b → b = c → a = c
+ eq_neg_of_add_eq_zero : a + b = 0 → a = -b
+ eq_of_le_of_forall_le_of_dense : a₂ ≤ a₁ → (∀ a₃ > a₂, a₁ ≤ a₃) →  a₁ = a₂
+ eq_or_eq_neg_of_pow_two_eq_pow_two : a ^ 2 = b ^ 2 → a = b ∨ a = -b
+ eq_or_lt_of_le : a ≤ b → a = b ∨ a < b
+ eq_zero_or_eq_zero_of_mul_eq_zero : a * b = 0 → a = 0 ∨ b = 0
+ exists.elim : ∃ x, p x → ∀ (a : α), p a → b → b
+ gcd_dvd : gcd a b ∣ a ∧ gcd a b ∣ b
+ gcd_eq_left_iff_dvd : a ∣ b ↔ gcd a b = a
+ ge_max_iff : r ≥ max p q  ↔ r ≥ p ∧ r ≥ q
+ id : P → P
+ iff.intro : (P → Q) → (Q → P) → (P ↔ Q)
+ le_add_of_nonneg_left : 0 ≤ b → a ≤ b + a
+ le_add_of_nonneg_right : 0 ≤ b → a ≤ a + b
+ le_max_left : p ≤ max p q
+ le_max_right : q ≤ max p q
+ le_of_lt : a < b → a ≤ b
+ le_of_max_le_left : max a b ≤ c → a ≤ c
+ le_of_max_le_right : max a b ≤ c → b ≤ c
+ le_total : a ≤ b ∨ b ≤ a
+ le_trans: a ≤ b → b ≤ c → a ≤ c
+ max_le_iff : max a b ≤ c ↔ a ≤ c ∧ b ≤ c
+ monotone.comp : monotone g → monotone f → monotone (g ∘ f)
+ mul_assoc : (a * b) * c = a * (b * c)
+ mul_comm : a * b = b * a
+ mul_eq_zero : a * b = 0 ↔ a = 0 ∨ b = 0
+ mul_mono_nonneg : 0 ≤ c → a ≤ b → a * c ≤ b * c
+ mul_mono_nonpos : 0 ≥ c → b ≤ a → a * c ≤ b * c
+ mul_nonneg : 0 ≤ a → 0 ≤ b → 0 ≤ a * b
+ mul_nonneg_of_nonpos_of_nonpos : a ≤ 0 → b ≤ 0 → 0 ≤ a * b
+ mul_sub : a * (b - c) = a * b - a * c
+ nat.succ_pos : 0 < succ n
+ neg_square : (-z)^2 = z^2
+ not_imp_not : (¬a → ¬b) ↔ (b → a)
+ odd_iff_not_even : odd n ↔ ¬ even n
+ or_comm : a ∨ b ↔ b ∨ a
+ or.elim : P ∨ Q → (P → R) → (Q → R) → R
+ or.rec : (P → R) → (Q → R) → P ∨ Q → R
+ pow_two : a^2 = a * a
+ pow_two_sub_pow_two : a ^ 2 - b ^ 2 = (a + b) * (a - b)
+ rfl : a = a
+ sub_eq_zero : a - b = 0 ↔ a = b
+ sub_le_sub_right : a ≤ b → a - c ≤ b - c
+ sub_nonneg : 0 ≤ a - b ↔ b ≤ a
+ sub_nonpos : a - b ≤ 0 ↔ a ≤ b
+ sub_self : a - a = 0
+ sub_sub : (a - b) - c = a - (b + c)
+ surjective f : ∀ b, ∃ a, f a = b
+ surjective.comp : surjective g → surjective f → surjective (g ∘ f)
+ surjective.of_comp : surjective (f ∘ g) → surjective f
+ two_mul : 2 * a = a + a
+ zero_add : 0 + a = a
+ zero_dvd_iff : 0 ∣ a ↔ a = 0
+ zero_eq_mul : 0 = a * b ↔ a = 0 ∨ b = 0
+ zero_mul : 0 * a = 0
#+end_src
